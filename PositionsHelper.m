(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["PositionsHelper`"];


(* ::Input::Initialization:: *)
DiagonalIndices::usage=
"DiagonalIndices[{i,j}] returns the indices on the leading diagonal corresponding to an i \[Times] j matrix.
DiagonalIndices[{i,j},k] returns the indices on the \!\(\*
StyleBox[\"k\",\nFontSlant->\"Italic\"]\)-th diagonal corresponding to an i \[Times] j matrix.";


(* ::Input::Initialization:: *)
DiagonalIndices::badargs=
"The k-th diagonal must be within the range -(i-1) \[LessEqual] k \[LessEqual] (j-1).";


(* ::Input::Initialization:: *)
IndicesArray::usage="IndicesArray[{n}] returns a complete list of single-part specifications corresponding to a list of length \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\).
IndicesArray[{\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}] returns a complete list of single-part specifications corresponding to an \!\(\*SubscriptBox[\(n\), \(1\)]\) \[Times] \!\(\*SubscriptBox[\(n\), \(2\)]\) array.
IndicesArray[{\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\), \[Ellipsis]}] returns a complete list of single-part specifications corresponding to an \!\(\*SubscriptBox[\(n\), \(1\)]\) \[Times] \!\(\*SubscriptBox[\(n\), \(2\)]\) \[Times] \[Ellipsis] array.";


(* ::Input::Initialization:: *)
IndicesArray::badargs=
"IndicesArray returns a list/array of complete single-part specifications, args must be of form {n} or {\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\), \[Ellipsis]}. (Spans not supported).";


(* ::Input::Initialization:: *)
IndicesList::usage="IndicesArray[{n}] returns a complete list of single-part specifications corresponding to an \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\) length list.";


(* ::Input::Initialization:: *)
IndicesList::badargs=
"IndicesList returns a list of complete single-part specifications, args must be of form {n}. (Spans not supported).";


(* ::Input::Initialization:: *)
IndicesMatrix::usage="IndicesMatrix[{\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}] returns a complete list of single-part specifications corresponding to an \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(1\)]\) \[Times] \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(2\)]\) matrix.";


(* ::Input::Initialization:: *)
IndicesMatrix::badargs=
"IndicesMatrix returns a list of complete single-part specifications, args must be of form {\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}. (Spans not supported).";


(* ::Input::Initialization:: *)
IndicesMatrixColumn::usage="IndicesMatrixColumn[{\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)},k] returns single-part specifications corresponding to the \!\(\*
StyleBox[\"k\",\nFontSlant->\"Italic\"]\)-th column of an \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(1\)]\) \[Times] \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(2\)]\) matrix.";


(* ::Input::Initialization:: *)
IndicesMatrixColumn::badargs=
"IndicesMatrixColumn returns a list of complete single-part specifications, dimension args must be of form {\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}. (Spans not supported).";


(* ::Input::Initialization:: *)
IndicesMatrixFirstColumn::usage="IndicesMatrixFirstColumn[{\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}] returns single-part specifications corresponding to the first column of an \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(1\)]\) \[Times] \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(2\)]\) matrix.";


(* ::Input::Initialization:: *)
IndicesMatrixFirstColumn::badargs=
"IndicesMatrixFirstColumn returns a list of complete single-part specifications, args must be of form {\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}. (Spans not supported).";


(* ::Input::Initialization:: *)
IndicesMatrixFirstRow::usage="IndicesMatrixFirstRow[{\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}] returns single-part specifications corresponding to the first row of an \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(1\)]\) \[Times] \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(2\)]\) matrix.";


(* ::Input::Initialization:: *)
IndicesMatrixFirstRow::badargs=
"IndicesMatrixFirstRow returns a list of complete single-part specifications, args must be of form {\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}. (Spans not supported).";


(* ::Input::Initialization:: *)
IndicesMatrixLastColumn::usage="IndicesMatrixLastColumn[{\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}] returns single-part specifications corresponding to the last column of an \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(1\)]\) \[Times] \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(2\)]\) matrix.";


(* ::Input::Initialization:: *)
IndicesMatrixLastColumn::badargs=
"IndicesMatrixLastColumn returns a list of complete single-part specifications, args must be of form {\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}. (Spans not supported).";


(* ::Input::Initialization:: *)
IndicesMatrixLastRow::usage="IndicesMatrixLastRow[{\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}] returns single-part specifications corresponding to the last row of an \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(1\)]\) \[Times] \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(2\)]\) matrix.";


(* ::Input::Initialization:: *)
IndicesMatrixLastRow::badargs=
"IndicesMatrixRow returns a list of complete single-part specifications, args must be of form {\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}. (Spans not supported).";


(* ::Input::Initialization:: *)
IndicesMatrixRow::usage="IndicesMatrixRow[{\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)},k] returns single-part specifications corresponding to the \!\(\*
StyleBox[\"k\",\nFontSlant->\"Italic\"]\)-th row of an \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(1\)]\) \[Times] \!\(\*SubscriptBox[
StyleBox[\"n\",\nFontSlant->\"Italic\"], \(2\)]\) matrix.";


(* ::Input::Initialization:: *)
IndicesMatrixRow::badargs=
"IndicesMatrixRow returns a list of complete single-part specifications, dimension args must be of form {\!\(\*SubscriptBox[\(n\), \(1\)]\), \!\(\*SubscriptBox[\(n\), \(2\)]\)}. (Spans not supported).";


(* ::Input::Initialization:: *)
SkewDiagonalIndices::usage=
"SkewDiagonalIndices[{i,j}] returns the indices on the leading diagonal corresponding to an i \[Times] j matrix.
SkewDiagonalIndices[{i,j},k] returns the indices on the \!\(\*
StyleBox[\"k\",\nFontSlant->\"Italic\"]\)-th skew diagonal corresponding to an i \[Times] j matrix.";


(* ::Input::Initialization:: *)
SkewDiagonalIndices::badargs=
"The k-th diagonal must be within the range -(i-1) \[LessEqual] k \[LessEqual] (j-1).";


(* ::Input::Initialization:: *)
ValidDiagonalKValueQ::usage=
"ValidDiagonalKValueQ[{i,j},k] returns True iff k-value is within a valid range for the diagonal of an i \[Times] j matrix.";


(* ::Input::Initialization:: *)
Begin["`Private`"];


(* ::Input::Initialization:: *)
DiagonalIndices[{i_Integer,j_Integer},k_Integer]/;
And[i>=1,j>=1,ValidDiagonalKValueQ[{i,j},k]]:=
Module[{
diagLength,
major,
minor,
rs (* row indices*),
cs (* column indices *)},
diagLength=If[
k>=0,
(* then *)
Min[i,j-k],
(* else *)
Min[i-Abs@k,j]];
major=majorRun[diagLength];
minor=minorRun[diagLength,k];
If[k>=0,
(* then *)
{rs, cs} = {major,minor},
(* else *)
{rs, cs} = {minor, major}];
Return[Transpose[{rs,cs}]]
];


(* ::Input::Initialization:: *)
DiagonalIndices[{i_Integer,j_Integer}]/;
And[i>=1,j>=1]:=
DiagonalIndices[{i,j},0];


(* ::Input::Initialization:: *)
DiagonalIndices[{i_Integer,j_Integer},k_Integer]/;
And[i>=1,j>=1,!ValidDiagonalKValueQ[{i,j},k]]:=Message[DiagonalIndices::badargs];


(* ::Input::Initialization:: *)
IndicesArray[dim:{_Integer?Positive..}]:=Join@@Array[List,dim];


(* ::Input::Initialization:: *)
IndicesArray[_Integer..]:=Message[IndicesArray::badargs];


(* ::Input::Initialization:: *)
IndicesList[{i_Integer}]/;i>0:=IndicesArray[{i}];


(* ::Input::Initialization:: *)
IndicesList[_Integer]:=Message[IndicesList::badargs];


(* ::Input::Initialization:: *)
IndicesMatrix[{i_Integer,j_Integer}]/;
And[i>0,j>0]:=IndicesArray[{i,j}];


(* ::Input::Initialization:: *)
IndicesMatrix[_Integer,_Integer]:=Message[IndicesMatrix::badargs];


(* ::Input::Initialization:: *)
IndicesMatrixColumn[{i_Integer,j_Integer},k_Integer]/;
And[i>0,j>0,k>0]:=Table[{row,k},{row,1,i}];


(* ::Input::Initialization:: *)
IndicesMatrixColumn[_Integer,_Integer,k_Integer]:=Message[IndicesMatrixColumn::badargs];


(* ::Input::Initialization:: *)
IndicesMatrixFirstColumn[{i_Integer,j_Integer}]/;
And[i>0,j>0]:=Table[{row,1},{row,1,i}];


(* ::Input::Initialization:: *)
IndicesMatrixFirstColumn[_Integer,_Integer]:=Message[IndicesMatrixFirstColumn::badargs];


(* ::Input::Initialization:: *)
IndicesMatrixFirstRow[{i_Integer,j_Integer}]/;
And[i>0,j>0]:=Table[{1,col},{col,1,j}];


(* ::Input::Initialization:: *)
IndicesMatrixFirstRow[_Integer,_Integer]:=Message[IndicesMatrixFirstRow::badargs];


(* ::Input::Initialization:: *)
IndicesMatrixLastColumn[{i_Integer,j_Integer}]/;
And[i>0,j>0]:=Table[{row,j},{row,1,i}];


(* ::Input::Initialization:: *)
IndicesMatrixLastColumn[_Integer,_Integer]:=Message[IndicesMatrixLastColumn::badargs];


(* ::Input::Initialization:: *)
IndicesMatrixLastRow[{i_Integer,j_Integer}]/;
And[i>0,j>0]:=Table[{i,col},{col,1,j}];


(* ::Input::Initialization:: *)
IndicesMatrixLastRow[_Integer,_Integer]:=Message[IndicesMatrixLastRow::badargs];


(* ::Input::Initialization:: *)
IndicesMatrixRow[{i_Integer,j_Integer},k_Integer]/;
And[i>0,j>0,k>0]:=Table[{k,col},{col,1,j}];


(* ::Input::Initialization:: *)
IndicesMatrixRow[_Integer,_Integer,k_Integer]:=Message[IndicesMatrixRow::badargs];


(* ::Input::Initialization:: *)
SkewDiagonalIndices[{i_Integer,j_Integer},k_Integer]/;
And[i>=1,j>=1,ValidDiagonalKValueQ[{i,j},k]]:=Module[{
diagIndices,
relabelRules,
tr},
diagIndices=DiagonalIndices[{i,j},k];
relabelRules=Dispatch@Thread[Rule[Range@i,Reverse@Range@i]];
tr=Transpose@diagIndices;
Return[Transpose[{tr[[1]]/.relabelRules,tr[[2]]}]]
];


(* ::Input::Initialization:: *)
SkewDiagonalIndices[{i_Integer,j_Integer}]/;
And[i>=1,j>=1]:=
SkewDiagonalIndices[{i,j},0];


(* ::Input::Initialization:: *)
SkewDiagonalIndices[{i_Integer,j_Integer},k_Integer]/;
And[i>=1,j>=1,!ValidDiagonalKValueQ[{i,j},k]]:=Message[SkewDiagonalIndices::badargs];


(* ::Input::Initialization:: *)
ValidDiagonalKValueQ[{i_Integer,j_Integer},k_Integer]/;
And[i>=1,j>=1]:=
If[
k>=0,
(* then *)
Abs[k]<=j-1,
(* else *)
Abs[k]<=i-1
];


(* ::Input::Initialization:: *)
majorRun[diagLength_Integer]/;diagLength>0:=Range[1,diagLength];


(* ::Input::Initialization:: *)
minorRun[diagLength_Integer,k_Integer]/;
diagLength>0:=With[{
start=1+Abs@k},
Range[start,start+diagLength-1]];


(* ::Input::Initialization:: *)
End[](* "`Private`" *);
EndPackage[];
